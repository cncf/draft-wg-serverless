{
  "$id": "https://wg-serverless.org/serverless-workflow-schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Serverless Workflow is a vendor-neutral specification for defining the model of workflows responsible for orchestrating event-driven serverless applications",
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "description": "Workflow unique identifier",
      "minLength": 1
    },
    "name": {
      "type": "string",
      "description": "Workflow name",
      "minLength": 1
    },
    "description": {
      "type": "string",
      "description": "Workflow description"
    },
    "version": {
      "type": "string",
      "description": "Workflow version",
      "minLength": 1
    },
    "schemaVersion": {
      "type": "string",
      "description": "Serverless Workflow schema version",
      "minLength": 1
    },
    "expressionLanguage": {
      "type": "string",
      "description": "Default expression language to be used throughout the workflow definition",
      "minLength": 1
    },
    "dataInputSchema": {
      "type": "string",
      "format": "uri",
      "description": "URI to JSON Schema that workflow data input adheres to"
    },
    "dataOutputSchema": {
      "type": "string",
      "format": "uri",
      "description": "URI to JSON Schema that workflow data output adheres to"
    },
    "metadata": {
      "$ref": "#/definitions/metadata"
    },
    "events": {
      "type": "array",
      "description": "Workflow event definitions. Defines events that can be consumed or produced",
      "items": {
        "type": "object",
        "$ref": "#/definitions/eventdef"
      }
    },
    "functions": {
      "type": "array",
      "description": "Workflow function definitions",
      "items": {
        "type": "object",
        "$ref": "#/definitions/function"
      }
    },
    "tasks": {
      "type": "array",
      "description": "Task definitions",
      "items": {
        "anyOf": [
          {
            "title": "Delay Task",
            "$ref": "#/definitions/delaytask"
          },
          {
            "title": "Event Task",
            "$ref": "#/definitions/eventtask"
          },
          {
            "title": "Operation Task",
            "$ref": "#/definitions/operationtask"
          },
          {
            "title": "Parallel Task",
            "$ref": "#/definitions/paralleltask"
          },
          {
            "title": "Switch Task",
            "$ref": "#/definitions/switchtask"
          },
          {
            "title": "SubFlow Task",
            "$ref": "#/definitions/subflowtask"
          },
          {
            "title": "Inject Task",
            "$ref": "#/definitions/injecttask"
          },
          {
            "title": "ForEach Task",
            "$ref": "#/definitions/foreachtask"
          },
          {
            "title": "Callback Task",
            "$ref": "#/definitions/callbacktask"
          }
        ]
      }
    },
    "extensions": {
      "type": "array",
      "description": "Workflow extensions",
      "items": {
        "type": "object"
      }
    }
  },
  "required": [
    "id",
    "name",
    "version",
    "tasks"
  ],
  "definitions": {
    "metadata": {
      "type": "object",
      "description": "Metadata information"
    },
    "transition": {
      "type": "object",
      "properties": {
        "expression": {
          "description": "Expression evaluated against task's data output. Must evaluate to true for the transition to be valid",
          "$ref": "#/definitions/expression"
        },
        "produceEvent": {
          "description": "Reference one of the defined events by name and set its data",
          "$ref": "#/definitions/produceevent"
        },
        "nextTask": {
          "type": "string",
          "description": "Name of task to transition to",
          "minLength": 1
        }
      },
      "required": [
        "nextTask"
      ]
    },
    "error": {
      "type": "object",
      "properties": {
        "expression": {
          "description": "Expression that matches against the error in the task data input",
          "$ref": "#/definitions/expression"
        },
        "errorDataFilter": {
          "$ref": "#/definitions/errordatafilter"
        },
        "transition": {
          "description": "Next transition of the workflow when expression is matched",
          "$ref": "#/definitions/transition"
        }
      },
      "required": [
        "expression",
        "transition"
      ]
    },
    "eventdef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique event name",
          "minLength": 1
        },
        "source": {
          "type": "string",
          "description": "CloudEvent source"
        },
        "type": {
          "type": "string",
          "description": "CloudEvent type"
        },
        "correlationToken": {
          "type": "string",
          "description": "Context attribute name of the CloudEvent which value is to be used for event correlation"
        },
        "metadata": {
          "$ref": "#/definitions/metadata",
          "description": "Metadata information"
        }
      },
      "required": [
        "name",
        "source",
        "type"
      ]
    },
    "eventactions": {
      "type": "object",
      "properties": {
        "eventRefs": {
          "type" : "array",
          "description": "References one or more unique event names in the defined workflow events"
        },
        "actionMode": {
          "type": "string",
          "enum": [
            "sequential",
            "parallel"
          ],
          "description": "Specifies how actions are to be performed (in sequence of parallel)",
          "default": "sequential"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be performed if expression matches",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "eventDataFilter": {
          "$ref": "#/definitions/eventdatafilter"
        }
      },
      "required": [
        "eventRefs",
        "actions"
      ]
    },
    "action": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique action definition name"
        },
        "functionRef": {
          "description": "References a reusable function definition",
          "$ref": "#/definitions/functionref"
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for function execution to complete"
        },
        "actionDataFilter": {
          "$ref": "#/definitions/actiondatafilter"
        }
      },
      "required": [
        "functionRef"
      ]
    },
    "retry": {
      "type": "object",
      "description": "Retry Definition",
      "properties": {
        "expression": {
          "description": "Expression that matches against task data output",
          "$ref": "#/definitions/expression"
        },
        "interval": {
          "type": "string",
          "description": "Interval value for retry (ISO 8601 repeatable format)"
        },
        "multiplier": {
          "type": "string",
          "description": "Multiplier value by which interval increases during each attempt (ISO 8601 time format)"
        },
        "maxAttempts": {
          "type": "integer",
          "default": 1,
          "minimum": 0,
          "description": "Maximum number of retry attempts (1 by default). Value of 0 means no retries are performed"
        }
      },
      "required": [
        "expression"
      ]
    },
    "function": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique function name",
          "minLength": 1
        },
        "resource": {
          "type": "string",
          "description": "Function resource (URI)"
        },
        "type": {
          "type": "string",
          "description": "Function type"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "required": [
        "name",
        "resource"
      ]
    },
    "functionref": {
      "type": "object",
      "description": "Function Reference",
      "properties": {
        "refName": {
          "type": "string",
          "description": "Name of the referenced function"
        },
        "parameters": {
          "type": "object",
          "description": "Function parameters"
        }
      },
      "required": [
        "refName"
      ]
    },
    "branch": {
      "type": "object",
      "description": "Branch Definition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Branch name"
        },
        "tasks": {
          "type": "array",
          "description": "Task Definitions",
          "items": {
            "anyOf": [
              {
                "title": "Delay Task",
                "$ref": "#/definitions/delaytask"
              },
              {
                "title": "Event Task",
                "$ref": "#/definitions/eventtask"
              },
              {
                "title": "Operation Task",
                "$ref": "#/definitions/operationtask"
              },
              {
                "title": "Switch Task",
                "$ref": "#/definitions/switchtask"
              },
              {
                "title": "SubFlow Task",
                "$ref": "#/definitions/subflowtask"
              },
              {
                "title": "Inject Task",
                "$ref": "#/definitions/injecttask"
              },
              {
                "title": "ForEach Task",
                "$ref": "#/definitions/foreachtask"
              },
              {
                "title": "Callback Task",
                "$ref": "#/definitions/callbacktask"
              }
            ]
          }
        }
      },
      "required": [
        "name",
        "tasks"
      ]
    },
    "delaytask": {
      "type": "object",
      "description": "Causes the workflow execution to delay for a specified duration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "delay"
          ],
          "description": "Task type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Task end definition"
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "timeDelay": {
          "type": "string",
          "description": "Amount of time (ISO 8601 format) to delay"
        },
        "onError": {
          "type": "array",
          "description": "OnError Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after the time delay",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "timeDelay",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "timeDelay",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "timeDelay",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "timeDelay",
            "end"
          ]
        }
      ]
    },
    "eventtask": {
      "type": "object",
      "description": "This task is used to wait for events from event sources, then consumes them and invoke one or more actions to run in sequence or parallel",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "event"
          ],
          "description": "Task type"
        },
        "exclusive": {
          "type": "boolean",
          "default": true,
          "description": "If true consuming one of the defined events causes its associated actions to be performed. If false all of the defined events must be consumed in order for actions to be performed"
        },
        "eventsActions": {
          "type": "array",
          "description": "Define what events trigger one or more actions to be performed",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventactions"
          }
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for incoming events (ISO 8601 format)"
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "retry": {
          "type": "array",
          "description": "Retry Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "Tasks error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Task end definition"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "eventsActions",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "eventsActions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "eventsActions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "eventsActions",
            "end"
          ]
        }
      ]
    },
    "operationtask": {
      "type": "object",
      "description": "Defines actions be performed. Does not wait for incoming events",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "operation"
          ],
          "description": "Task type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Task end definition"
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "actionMode": {
          "type": "string",
          "enum": [
            "sequential",
            "parallel"
          ],
          "description": "Specifies whether actions are performed in sequence or in parallel",
          "default": "sequential"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be performed",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "retry": {
          "type": "array",
          "description": "Retry Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "Tasks error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "actionMode",
            "actions",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "actionMode",
            "actions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "actionMode",
            "actions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "actionMode",
            "actions",
            "end"
          ]
        }
      ]
    },
    "paralleltask": {
      "type": "object",
      "description": "Consists of a number of tasks that are executed in parallel",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "parallel"
          ],
          "description": "Task type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Task end definition"
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "branches": {
          "type": "array",
          "description": "Branch Definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/branch"
          }
        },
        "completionType": {
          "type" : "string",
          "enum": ["and", "xor", "n_of_m"],
          "description": "Option types on how to complete branch execution.",
          "default": "and"
        },
        "n": {
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Used when completionType is set to 'n_of_m' to specify the 'N' value"
        },
        "retry": {
          "type": "array",
          "description": "Retry Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "Tasks error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after all branches have completed execution",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "branches",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "branches",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "branches",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "branches",
            "transition",
            "end"
          ]
        }
      ]
    },
    "switchtask": {
      "oneOf": [
        {
          "$ref": "#/definitions/databasedswitch"
        },
        {
          "$ref": "#/definitions/eventbasedswitch"
        }
      ]
    },
    "eventbasedswitch": {
      "type": "object",
      "description": "Permits transitions to other tasks based on events",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "switch"
          ],
          "description": "Task type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "eventConditions": {
          "type": "array",
          "description": "Defines conditions evaluated against events",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventcondition"
          }
        },
        "onError": {
          "type": "array",
          "description": "Tasks error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "eventTimeout": {
          "type": "string",
          "description": "If eventConditions is used, defines the time period to wait for events (ISO 8601 format)"
        },
        "default": {
          "description": "Next transition of the workflow if there is no matching data conditions, or event timeout is reached",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "eventConditions",
            "default"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "eventConditions",
            "default"
          ]
        }
      ]
    },
    "databasedswitch": {
      "type": "object",
      "description": "Permits transitions to other tasks based on data conditions",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "switch"
          ],
          "description": "Task type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "dataConditions": {
          "type": "array",
          "description": "Defines conditions evaluated against task data",
          "items": {
            "type": "object",
            "$ref": "#/definitions/datacondition"
          }
        },
        "onError": {
          "type": "array",
          "description": "Tasks error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "default": {
          "description": "Next transition of the workflow if there is no matching data conditions, or event timeout is reached",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "dataConditions",
            "default"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "dataConditions",
            "default"
          ]
        }
      ]
    },
    "eventcondition": {
      "type": "object",
      "description": "Switch task data event condition",
      "properties": {
        "eventRef": {
          "type" : "string",
          "description": "References an unique event name in the defined workflow events"
        },
        "transition": {
          "description": "Next transition of the workflow if there is valid matches",
          "$ref": "#/definitions/transition"
        }
      },
      "eventDataFilter": {
        "description": "Event data filter definition",
        "$ref": "#/definitions/eventdatafilter"
      },
      "metadata": {
        "$ref": "#/definitions/metadata"
      },
      "required": ["eventRef", "transition"]
    },
    "datacondition": {
      "type": "object",
      "description": "Switch task data based condition",
      "properties": {
        "path": {
          "type": "string",
          "description": "JSONPath expression that selects elements of task data"
        },
        "value": {
          "type": "string",
          "description": "Matching value"
        },
        "operator": {
          "type" : "string",
          "enum": ["exists", "notexists", "null", "notnull", "equals", "notequals", "lessthan", "lessthanorequals", "greaterthan", "greaterthanorequals", "matches", "notmatches", "custom"],
          "description": "Condition operator"
        },
        "transition": {
          "description": "Next transition of the workflow if there is valid matches",
          "$ref": "#/definitions/transition"
        }
      },
      "metadata": {
        "$ref": "#/definitions/metadata"
      },
      "required": ["path", "value", "operator", "transition"]
    },
    "subflowtask": {
      "type": "object",
      "description": "Defines a sub-workflow to be executed",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "subflow"
          ],
          "description": "Task type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Task end definition"
        },
        "waitForCompletion": {
          "type": "boolean",
          "default": false,
          "description": "Workflow execution must wait for sub-workflow to finish before continuing"
        },
        "workflowId": {
          "type": "string",
          "description": "Sub-workflow unique id"
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "onError": {
          "type": "array",
          "description": "Tasks error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after SubFlow has completed execution",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "workflowId",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "workflowId",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "workflowId",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "workflowId",
            "end"
          ]
        }
      ]
    },
    "injecttask": {
      "type": "object",
      "description": "Inject static data into task data. Does not perform any actions",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "inject"
          ],
          "description": "Task type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Task end definition"
        },
        "data": {
          "type": "object",
          "description": "JSON object which can be set as tasks data input and can be manipulated via filters"
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "transition": {
          "description": "Next transition of the workflow after subflow has completed",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "end"
          ]
        }
      ]
    },
    "foreachtask": {
      "type": "object",
      "description": "Execute a set of defined tasks for each element of the data input array",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type": "string",
          "enum": [
            "foreach"
          ],
          "description": "Task type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Task end definition"
        },
        "inputCollection": {
          "type": "string",
          "description": "JSONPath expression selecting a JSON array element of the tasks data input"
        },
        "outputCollection": {
          "type": "string",
          "description": "JSONPath expression specifying where in the tasks data output to place the final data output of each iteration of the executed tasks"
        },
        "inputParameter": {
          "type": "string",
          "description": "JSONPath expression specifying a JSON object field of the tasks data input. For each parallel iteration, this field will get populated with a unique element of the inputCollection array"
        },
        "max": {
          "type": "integer",
          "default": "0",
          "minimum": 0,
          "description": "Specifies how upper bound on how many iterations may run in parallel"
        },
        "timeDelay": {
          "type": "string",
          "description": "Amount of time (ISO 8601 format) to wait between each iteration "
        },
        "tasks": {
          "type": "array",
          "description": "Tasks to be executed for each of the elements of inputCollection",
          "items": {
            "anyOf": [
              {
                "title": "Delay Task",
                "$ref": "#/definitions/delaytask"
              },
              {
                "title": "Event Task",
                "$ref": "#/definitions/eventtask"
              },
              {
                "title": "Operation Task",
                "$ref": "#/definitions/operationtask"
              },
              {
                "title": "Switch Task",
                "$ref": "#/definitions/switchtask"
              },
              {
                "title": "SubFlow Task",
                "$ref": "#/definitions/subflowtask"
              },
              {
                "title": "Inject Task",
                "$ref": "#/definitions/injecttask"
              },
              {
                "title": "ForEach Task",
                "$ref": "#/definitions/foreachtask"
              },
              {
                "title": "Callback Task",
                "$ref": "#/definitions/callbacktask"
              }
            ]
          }
        },
        "taskDataFilter": {
          "$ref": "#/definitions/taskdatafilter"
        },
        "retry": {
          "type": "array",
          "description": "Retry Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "Tasks error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after task has completed",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "tasks",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "tasks",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "tasks",
            "end"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "tasks",
            "transition"
          ]
        }
      ]
    },
    "callbacktask": {
      "type": "object",
      "description": "This task performs an action, then waits for the callback event that denotes completion of the action",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique task id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "type": {
          "type" : "string",
          "enum": ["callback"],
          "description": "Task type"
        },
        "action": {
          "description": "Defines the action to be executed",
          "$ref": "#/definitions/action"
        },
        "eventRef": {
          "type" : "string",
          "description": "References an unique callback event name in the defined workflow events"
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for incoming events (ISO 8601 format)"
        },
        "eventDataFilter": {
          "description": "Callback event data filter definition",
          "$ref": "#/definitions/eventdatafilter"
        },
        "taskDataFilter": {
          "description": "Task data filter definition",
          "$ref": "#/definitions/taskdatafilter"
        },
        "retry": {
          "type": "array",
          "description": "Tasks retry definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "Tasks error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that task data output adheres to"
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "Task start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Task end definition"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "action",
            "eventRef",
            "timeout",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "action",
            "eventRef",
            "timeout",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "action",
            "eventRef",
            "timeout",
            "end"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "action",
            "eventRef",
            "timeout",
            "transition"
          ]
        }
      ]
    },
    "expression": {
      "type": "object",
      "description": "Defines the expression language and body of the expression",
      "properties": {
        "language": {
          "type": "string",
          "description": "Expression language. For example 'spel', 'jexl', 'cel', etc"
        },
        "body": {
          "type": "string",
          "description": "The expression body"
        }
      },
      "required": [
        "body"
      ]
    },
    "start": {
      "type": "object",
      "description": "Task start definition",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "default",
            "scheduled"
          ],
          "description": "Kind of start definition"
        },
        "schedule": {
          "description": "If kind is scheduled, define when the starting task is or becomes active",
          "$ref": "#/definitions/schedule"
        }
      },
      "if": {
        "properties": {
          "kind": {
            "const": "scheduled"
          }
        }
      },
      "then": {
        "required": [
          "kind",
          "schedule"
        ]
      },
      "else": {
        "required": [
          "kind"
        ]
      }
    }, 
    "schedule": {
      "type": "object",
      "description": "Start task schedule definition",
      "properties": {
        "interval": {
          "type": "string",
          "description":  "Time interval describing when the workflow starting task is active"
        }
      },
      "required": [
        "interval"
      ]
    },
    "end": {
      "type": "object",
      "description": "Task end definition",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "default",
            "terminate",
            "event"
          ],
          "description": "Kind of end definition"
        },
        "produceEvent": {
          "description": "If end kind is event, select one of the defined events by name and set its data",
          "$ref": "#/definitions/produceevent"
        }
      },
      "if": {
        "properties": {
          "kind": {
            "const": "event"
          }
        }
      },
      "then": {
        "required": [
          "kind",
          "produceEvent"
        ]
      },
      "else": {
        "required": [
          "kind"
        ]
      }
    },
    "produceevent": {
      "type": "object",
      "description": "Produce an event and set its data",
      "properties": {
        "eventRef": {
          "type": "string",
          "description": "References a name of a defined event"
        },
        "data": {
          "type": ["string", "object"],
          "description": "If String, JSONPath expression which selects parts of the tasks data output to become the data of the produced event. If object a custom object to become the data of produced event."
        }
      },
      "required": [
        "eventRef"
      ]
    },
    "taskdatafilter": {
      "type": "object",
      "properties": {
        "dataInputPath": {
          "type": "string",
          "description": "JSONPath definition that selects parts of the tasks data input"
        },
        "dataOutputPath": {
          "type": "string",
          "description": "JSONPath definition that selects parts of the tasks data output"
        }
      },
      "required": []
    },
    "eventdatafilter": {
      "type": "object",
      "properties": {
        "dataOutputPath": {
          "type": "string",
          "description": "JSONPath definition that selects parts of the event data, to be merged with the tasks data"
        }
      },
      "required": []
    },
    "actiondatafilter": {
      "type": "object",
      "properties": {
        "dataInputPath": {
          "type": "string",
          "description": "JSONPath definition that selects parts of the tasks data input to be the action data"
        },
        "dataResultsPath": {
          "type": "string",
          "description": "JSONPath definition that selects parts of the actions data result, to be merged with the tasks data"
        }
      },
      "required": []
    },
    "errordatafilter": {
      "type": "object",
      "properties": {
        "dataOutputPath": {
          "type": "string",
          "description": "JSONPath definition that selects parts of the error data, to be merged with the tasks data"
        }
      },
      "required": []
    }
  }
}